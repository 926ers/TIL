캐시
원본 데이터에 접근전에 캐시 공간에서 낮은 시간 복잡도롤 접근 가능한 곳
캐시 내부에서 데이터 먼저 찾기
cache miss거나expired 되면 원본에 접근
적은 공간이므로 안쓰는 데이터는 삭제해서 공간 확보


하드 디스크 -> cpu보다 훨씬 느림
db의 대부분의 읽기이므로 결과를 캐싱하면 효율 up
영속성 컨텍스트 레이지 로딩, 이거? -> 일종의 캐시

CDN(content Delivery Network)
곳곳에 ㅐ시 서버를 두어 전송속도를 높이고 부하를 분산하는시스템, 네트워크 비용 감소
ex) 유튜브 국내 통신사 서버

웹 캐시
네트워크가 하드디스크보다 느릴때 있다
웹브라우저는 html, css 등을 캐싱했다가 이를 재활용 -> 브라우저 캐시
웹서버에서 동적 웹페이지여도 내용이 바뀌지 않는다면 서버에서 html을 캐싱했다가 다음 요청에 재활용
클라이언트의 자주 요청받는 내용은 웹서버로 전달하지 않고 프록시 서버에서 캐싱한 데이터를 바로 제공 -> 프로시 캐시

레디스
메모리 기반 DMBS
휘발되지 않도록 하드디스크 기록 가능
여러 자료형 지원

EHcache
자바 표준 캐싱 APi 명세를 따른는 오픈소스 캐시 구현체
어노테이션으로 등록해서 쓰더라
스프링, hibernate orm에서 바로 사용가능
저장공간의 속도에 따라 여러 등급으로 나누어 메모리 계층구조를 적용가능
대규모 서비스에서 캐시 서버를 클러스터로 묶을수있다 -> 레디스도 클러스터 기능 있따

메인 페이지 같은 경우는 그냥 통체로 30초간 캐싱하는게 좋은거 같아요